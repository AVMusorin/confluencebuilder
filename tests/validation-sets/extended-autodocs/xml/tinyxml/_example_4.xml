<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_example_4" kind="page">
    <compoundname>Example_4</compoundname>
    <title>Read attributes and text information.</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para></para>
<para>There are fundamentally 2 ways of writing a key-value pair into an XML file. (Something that&apos;s always annoyed me about XML.) Either by using attributes, or by writing the key name into an element and the value into the text node wrapped by the element. Both approaches are illustrated in this example, which shows two ways to encode the value &quot;2&quot; into the key &quot;v&quot;:</para>
<para><programlisting filename="./xmltest.cpp"><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>example_4()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>xml<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;information&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&lt;attributeApproach<sp/>v=&apos;2&apos;<sp/>/&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&lt;textApproach&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;v&gt;2&lt;/v&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&lt;/textApproach&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;/information&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> TinyXML-2 has accessors for both approaches.</para>
<para>When using an attribute, you navigate to the XMLElement with that attribute and use the QueryIntAttribute() group of methods. (Also QueryFloatAttribute(), etc.)</para>
<para><programlisting filename="./xmltest.cpp"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>XMLElement*<sp/>attributeApproachElement<sp/>=<sp/>doc.FirstChildElement()-&gt;FirstChildElement(<sp/></highlight><highlight class="stringliteral">&quot;attributeApproach&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>attributeApproachElement-&gt;QueryIntAttribute(<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal">,<sp/>&amp;v0<sp/>);</highlight></codeline>
</programlisting> When using the text approach, you need to navigate down one more step to the XMLElement that contains the text. Note the extra FirstChildElement( &quot;v&quot; ) in the code below. The value of the text can then be safely queried with the QueryIntText() group of methods. (Also QueryFloatText(), etc.)</para>
<para><programlisting filename="./xmltest.cpp"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>XMLElement*<sp/>textApproachElement<sp/>=<sp/>doc.FirstChildElement()-&gt;FirstChildElement(<sp/></highlight><highlight class="stringliteral">&quot;textApproach&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>textApproachElement-&gt;FirstChildElement(<sp/></highlight><highlight class="stringliteral">&quot;v&quot;</highlight><highlight class="normal"><sp/>)-&gt;QueryIntText(<sp/>&amp;v1<sp/>);</highlight></codeline>
</programlisting></para>
    </detaileddescription>
    <location file="xmltest.cpp"/>
  </compounddef>
</doxygen>

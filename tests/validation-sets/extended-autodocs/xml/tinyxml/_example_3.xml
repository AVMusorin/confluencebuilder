<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_example_3" kind="page">
    <compoundname>Example_3</compoundname>
    <title>Get information out of XML</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> In this example, we navigate a simple XML file, and read some interesting text. Note that this example doesn&apos;t use error checking; working code should check for null pointers when walking an XML tree, or use XMLHandle.</para>
<para>(The XML is an excerpt from &quot;dream.xml&quot;).</para>
<para><programlisting filename="./xmltest.cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>example_3()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>xml<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;?&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;!DOCTYPE<sp/>PLAY<sp/>SYSTEM<sp/>\&quot;play.dtd\&quot;&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;PLAY&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;TITLE&gt;A<sp/>Midsummer<sp/>Night&apos;s<sp/>Dream&lt;/TITLE&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;/PLAY&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> The structure of the XML file is:</para>
<para><itemizedlist>
<listitem>
<para>(declaration) </para>
</listitem>
<listitem>
<para>(dtd stuff) </para>
</listitem>
<listitem>
<para>Element &quot;PLAY&quot; <itemizedlist>
<listitem>
<para>Element &quot;TITLE&quot; <itemizedlist>
<listitem>
<para>Text &quot;A Midsummer Night&apos;s Dream&quot; </para>
</listitem>
</itemizedlist>
</para>
</listitem>
</itemizedlist>
</para>
</listitem>
</itemizedlist>
</para>
<para>For this example, we want to print out the title of the play. The text of the title (what we want) is child of the &quot;TITLE&quot; element which is a child of the &quot;PLAY&quot; element.</para>
<para>We want to skip the declaration and dtd, so the method FirstChildElement() is a good choice. The FirstChildElement() of the Document is the &quot;PLAY&quot; Element, the FirstChildElement() of the &quot;PLAY&quot; Element is the &quot;TITLE&quot; Element.</para>
<para><programlisting filename="./xmltest.cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>XMLDocument<sp/>doc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc.Parse(<sp/>xml<sp/>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>XMLElement*<sp/>titleElement<sp/>=<sp/>doc.FirstChildElement(<sp/></highlight><highlight class="stringliteral">&quot;PLAY&quot;</highlight><highlight class="normal"><sp/>)-&gt;FirstChildElement(<sp/></highlight><highlight class="stringliteral">&quot;TITLE&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
</programlisting> We can then use the convenience function GetText() to get the title of the play.</para>
<para><programlisting filename="./xmltest.cpp"><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>title<sp/>=<sp/>titleElement-&gt;GetText();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;Name<sp/>of<sp/>play<sp/>(1):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>title<sp/>);</highlight></codeline>
</programlisting> Text is just another Node in the XML DOM. And in fact you should be a little cautious with it, as text nodes can contain elements.</para>
<para><verbatim>Consider: A Midsummer Night&apos;s &lt;b&gt;Dream&lt;/b&gt;
</verbatim></para>
<para>It is more correct to actually query the Text Node if in doubt:</para>
<para><programlisting filename="./xmltest.cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>XMLText*<sp/>textNode<sp/>=<sp/>titleElement-&gt;FirstChild()-&gt;ToText();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/>textNode-&gt;Value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(<sp/></highlight><highlight class="stringliteral">&quot;Name<sp/>of<sp/>play<sp/>(2):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>title<sp/>);</highlight></codeline>
</programlisting> Noting that here we use FirstChild() since we are looking for XMLText, not an element, and ToText() is a cast from a Node to a XMLText. </para>
    </detaileddescription>
    <location file="xmltest.cpp"/>
  </compounddef>
</doxygen>
